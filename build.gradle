plugins {
    id 'org.springframework.boot' version '3.0.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'com.bmuschko.docker-spring-boot-application' version '9.3.1'
}

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

group = 'com.ohusiev'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

def ourContainerName = "bta"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

tasks.register('createDockerFile', Dockerfile) {
    from 'openjdk:17-alpine'
    copyFile 'budget-tracker-backend-' + version + '.jar', '/app/test_service.jar'
    entryPoint 'java'
    defaultCommand '-jar', '/app/test_service.jar'
    exposePort 8080
}

tasks.register('syncJar', Copy) {
    dependsOn assemble
    from jar.destinationDirectory
    into "$buildDir/docker"
}

tasks.register('buildImage', DockerBuildImage) {
    dependsOn createDockerFile, syncJar, removeContainer
    images = ["skain/budget-tracker-app"]
}

tasks.register('createContainer', DockerCreateContainer) {
    dependsOn buildImage, removeContainer
    targetImageId buildImage.getImageId()
    containerName = "$ourContainerName"
    hostConfig.portBindings = ['8080:8080', '27017:27017']
    hostConfig.extraHosts=['mongoservice:172.17.0.1']
}

tasks.register('stopContainer', DockerStopContainer) {
    targetContainerId("$ourContainerName")
    onError { exception -> handleError(exception) }
}

tasks.register('removeContainer', DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId("$ourContainerName")
    onError { exception -> handleError(exception) }
}

tasks.register('startContainer', DockerStartContainer) {
    dependsOn createContainer
    targetContainerId("$ourContainerName")
}

private static void handleError(Throwable exc) {
    if (exc.message != null &&
            !exc.message.contains('NotModifiedException') &&
            !exc.message.contains('No such container')) {
        throw new RuntimeException(exc)
    }
}
